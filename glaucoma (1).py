# -*- coding: utf-8 -*-
"""glaucoma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18zWI1--ORdyjs36qk4w3FAJZUOpYPGe5
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("glaucoma.csv")

df.head()

df.tail()

df.shape

df.columns

df.duplicated().sum()

df.isnull().sum()

df.info()

df.describe()

df.nunique()

import pandas as pd

# Load the dataset
df = pd.read_csv('glaucoma.csv')

# --- Code for this dataset ---

# 1. Split the 'Visual Field Test Results' column into two parts based on the comma and space delimiter.
# The new columns contain strings like "Sensitivity: 0.54" and "Specificity: 0.75".
df[['Sensitivity_part', 'Specificity_part']] = df['Visual Field Test Results'].str.split(', ', expand=True)

# 2. Extract the numerical value by splitting each part by ': ' and selecting the second element ([1]).
# Then, convert the resulting columns to the float data type.
df['Sensitivity'] = df['Sensitivity_part'].str.split(': ').str[1].astype(float)
df['Specificity'] = df['Specificity_part'].str.split(': ').str[1].astype(float)

# 3. Drop the temporary columns used for splitting
df = df.drop(columns=['Sensitivity_part', 'Specificity_part'])

# --- End of transformation code ---

# Display the new columns alongside the original for verification
print(df[['Visual Field Test Results', 'Sensitivity', 'Specificity']].head())

# Save the updated DataFrame to a new CSV file
df.to_csv('glaucoma_with_vft_metrics.csv', index=False)

df.columns

average_sensitivity = df['Sensitivity'].mean()
average_specificity = df['Specificity'].mean()

print(f"Average Visual Field Sensitivity: {average_sensitivity:.4f}")
print(f"Average Visual Field Specificity: {average_specificity:.4f}")

# Create a copy of the DataFrame with only the selected columns
df_selected = df.copy()

# 'df' is the DataFrame with 'Sensitivity' and 'Specificity' already created.
df_cleaned = df.drop(['Patient ID', 'Visual Field Test Results'], axis = 1)

columns_to_encode = ['Gender', 'Family History', 'Cataract Status']
df_encoded = pd.get_dummies(df_cleaned, columns=columns_to_encode, drop_first=True)

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# 1. Load the original dataset
df = pd.read_csv('glaucoma.csv')

# --- Preceding Transformations (Define df_transformed) ---
# Feature Extraction: Create Sensitivity and Specificity
df[['Sensitivity_part', 'Specificity_part']] = df['Visual Field Test Results'].str.split(', ', expand=True)
df['Sensitivity'] = df['Sensitivity_part'].str.split(': ').str[1].astype(float)
df['Specificity'] = df['Specificity_part'].str.split(': ').str[1].astype(float)
df = df.drop(columns=['Sensitivity_part', 'Specificity_part'])

# Drop Columns: Patient ID and the original text column
df_transformed = df.drop(['Patient ID', 'Visual Field Test Results'], axis=1)

# One-Hot Encoding: Apply get_dummies
columns_to_dummies = ['Gender', 'Family History', 'Cataract Status']
df_transformed = pd.get_dummies(df_transformed, columns=columns_to_dummies, drop_first=True)

# --- The Code That Caused The Error (Now Corrected) ---
label_encoder = LabelEncoder()
columns_to_label_encode = ['Angle Closure Status', 'Diagnosis']

for col in columns_to_label_encode:
    # Apply Label Encoding
    df_transformed[col] = label_encoder.fit_transform(df_transformed[col])

# Display the first few rows of the now-encoded columns
print("Successfully Encoded Columns:")
print(df_transformed[columns_to_label_encode].head())

# Save the final DataFrame
df_transformed.to_csv('glaucoma_fully_encoded.csv', index=False)

df_encoded.columns

from sklearn.ensemble import RandomForestClassifier

# Assuming df_transformed is the DataFrame after all encoding steps...

# Columns to exclude from the feature matrix X (target and remaining complex strings)
columns_to_exclude = [
    'Diagnosis',                            # The target variable (y)
    'Visual Acuity Measurements',           # Remaining string data
    'Medical History',
    'Medication Usage',
    'Optical Coherence Tomography (OCT) Results',
    'Visual Symptoms',
    'Glaucoma Type'
]

# Define feature matrix X and target variable y
X = df_transformed.drop(columns_to_exclude, axis=1)
y = df_transformed['Diagnosis']

# Create a random forest classifier
clf = RandomForestClassifier(random_state=42)

# Fit the classifier to the data
clf.fit(X, y)

# Get feature importance scores
feature_importance = clf.feature_importances_

# Create a DataFrame to display feature importance scores
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importance})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Print the feature importance scores
print(feature_importance_df)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

logreg = LogisticRegression()

logreg.fit(X_train_resampled, y_train_resampled)

y_pred = logreg.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

report = classification_report(y_test, y_pred)
print("Classification Report:")
print(report)

from sklearn import svm
svc = svm.SVC()
svc.fit(X_train_resampled, y_train_resampled)

y_pred = svc.predict(X_test)

report = classification_report(y_test, y_pred)
print("Classification Report:")
print(report)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

import pickle
with open('logreg_model.pkl', 'wb') as file:
    pickle.dump(logreg, file)
print("Model saved as logreg_model.pkl")