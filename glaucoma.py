# -*- coding: utf-8 -*-
"""glaucoma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ySkLXAOdqSja2d13YEkyo0IlU3Gluqz
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import pickle

# --- 1. Load Data ---
# Note: In a real-world scenario, you would ensure 'glaucoma.csv' is accessible.
# We'll assume the path is correct here.
try:
    df = pd.read_csv('glaucoma.csv')
except FileNotFoundError:
    print("Error: 'glaucoma.csv' not found. Cannot train model.")
    exit()

# --- 2. Data Preparation (Matching previous steps) ---

# Feature Extraction: Sensitivity and Specificity
df[['Sensitivity_part', 'Specificity_part']] = df['Visual Field Test Results'].str.split(', ', expand=True)
df['Sensitivity'] = df['Sensitivity_part'].str.split(': ').str[1].astype(float)
df['Specificity'] = df['Specificity_part'].str.split(': ').str[1].astype(float)
df = df.drop(columns=['Sensitivity_part', 'Specificity_part'])

# Drop String Columns that won't be used in the model
columns_to_drop = [
    'Patient ID', 'Visual Field Test Results', 'Visual Acuity Measurements',
    'Medical History', 'Medication Usage', 'Optical Coherence Tomography (OCT) Results',
    'Visual Symptoms', 'Glaucoma Type'
]
df_transformed = df.drop(columns_to_drop, axis=1)

# One-Hot Encoding
columns_to_dummies = ['Gender', 'Family History', 'Cataract Status']
df_transformed = pd.get_dummies(df_transformed, columns=columns_to_dummies, drop_first=True)

# Label Encoding for Target and 'Angle Closure Status'
label_encoder = LabelEncoder()
df_transformed['Angle Closure Status'] = label_encoder.fit_transform(df_transformed['Angle Closure Status'])
df_transformed['Diagnosis'] = label_encoder.fit_transform(df_transformed['Diagnosis'])
# Diagnosis mapping: Glaucoma (0), No Glaucoma (1)

# --- 3. Define X and y ---
X = df_transformed.drop('Diagnosis', axis=1)
y = df_transformed['Diagnosis']

# --- 4. Train Model ---
clf = RandomForestClassifier(random_state=42)
clf.fit(X, y)

# --- 5. Save Model ---
model_filename = 'glaucoma_clf_model.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(clf, file)

print(f"Model successfully trained and saved as {model_filename}")